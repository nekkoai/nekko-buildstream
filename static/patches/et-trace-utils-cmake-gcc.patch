diff --git a/cmake/FindBackward.cmake b/cmake/FindBackward.cmake
deleted file mode 100644
index 71a4e819..00000000
--- a/cmake/FindBackward.cmake
+++ /dev/null
@@ -1,25 +0,0 @@
-# WHEN USING CONAN THIS SHOULD NOT BE USED
-# CMake find_package() Module for backward-cpp  library
-#
-# Example usage:
-#
-# find_package(backward-cpp REQUIRED)
-#
-
-
-include(FindPackageHandleStandardArgs)
-
-find_path(BACKWARD_CPP_INCLUDE_DIR backward.hpp PATHS ${PROJECT_SOURCE_DIR}/external)
-
-find_package_handle_standard_args(Backward DEFAULT_MSG BACKWARD_CPP_INCLUDE_DIR)
-mark_as_advanced(BACKWARD_CPP_INCLUDE_DIR)
-
-if (Backward_FOUND)
-    if (NOT TARGET Backward)
-        add_library(Backward INTERFACE IMPORTED GLOBAL)
-        target_include_directories(Backward INTERFACE ${BACKWARD_CPP_INCLUDE_DIR})
-    endif()
-    if (TARGET Backward AND NOT TARGET Backward::Backward)
-        add_library(Backward::Backward ALIAS Backward)
-    endif()
-endif()
\ No newline at end of file
diff --git a/cmake/Findcereal.cmake b/cmake/Findcereal.cmake
deleted file mode 100644
index a3d7cdd3..00000000
--- a/cmake/Findcereal.cmake
+++ /dev/null
@@ -1,29 +0,0 @@
-# WHEN USING CONAN THIS SHOULD NOT BE USED
-# CMake find_package() Module for cereal library
-#
-# Example usage:
-#
-# find_package(cereal)
-#
-# If successful the following variables will be defined
-# - CEREAL_FOUND - System has cereal
-# If successful the following targets will be defined
-# - cereal
-# - cereal::cereal
-
-include(FindPackageHandleStandardArgs)
-
-find_path(CEREAL_INCLUDE_DIR cereal/cereal.hpp)
-
-find_package_handle_standard_args(cereal DEFAULT_MSG CEREAL_INCLUDE_DIR)
-mark_as_advanced(CEREAL_INCLUDE_DIR)
-
-if (CEREAL_FOUND)
-    if (NOT TARGET cereal)
-        add_library(cereal INTERFACE IMPORTED GLOBAL)
-        set_target_properties(cereal PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${CEREAL_INCLUDE_DIR})
-    endif()
-    if (NOT TARGET cereal::cereal)
-        add_library(cereal::cereal ALIAS cereal)
-    endif()
-endif ()
diff --git a/cmake/Findglog.cmake b/cmake/Findglog.cmake
deleted file mode 100644
index 3c1d8cfd..00000000
--- a/cmake/Findglog.cmake
+++ /dev/null
@@ -1,50 +0,0 @@
-# - Try to find Glog
-#
-# The following variables are optionally searched for defaults
-#  GLOG_ROOT_DIR:            Base directory where all GLOG components are found
-#
-# The following targets are available after glog is found:
-#  glog
-#  glog::glog
-
-include(FindPackageHandleStandardArgs)
-
-set(GLOG_ROOT_DIR "" CACHE PATH "Folder contains Google glog")
-
-if(WIN32)
-    find_path(GLOG_INCLUDE_DIR glog/logging.h
-        PATHS ${GLOG_ROOT_DIR}/src/windows)
-else()
-    find_path(GLOG_INCLUDE_DIR glog/logging.h
-        PATHS ${GLOG_ROOT_DIR})
-endif()
-
-if(MSVC)
-    find_library(GLOG_LIBRARY_RELEASE libglog_static
-        PATHS ${GLOG_ROOT_DIR}
-        PATH_SUFFIXES Release)
-
-    find_library(GLOG_LIBRARY_DEBUG libglog_static
-        PATHS ${GLOG_ROOT_DIR}
-        PATH_SUFFIXES Debug)
-
-    set(GLOG_LIBRARY optimized ${GLOG_LIBRARY_RELEASE} debug ${GLOG_LIBRARY_DEBUG})
-else()
-    find_library(GLOG_LIBRARY glog
-        PATHS ${GLOG_ROOT_DIR}
-        PATH_SUFFIXES lib lib64)
-endif()
-
-find_package_handle_standard_args(glog DEFAULT_MSG GLOG_INCLUDE_DIR GLOG_LIBRARY)
-mark_as_advanced(GLOG_ROOT_DIR GLOG_LIBRARY_RELEASE GLOG_LIBRARY_DEBUG GLOG_LIBRARY GLOG_INCLUDE_DIR)
-
-if (GLOG_FOUND)
-    if (NOT TARGET glog)
-        add_library(glog UNKNOWN IMPORTED GLOBAL)
-        target_include_directories(glog INTERFACE ${GLOG_INCLUDE_DIR})
-        set_target_properties(glog PROPERTIES IMPORTED_LOCATION ${GLOG_LIBRARY})
-    endif()
-    if (TARGET glog AND NOT TARGET glog::glog)
-        add_library(glog::glog ALIAS glog)
-    endif()
-endif()
\ No newline at end of file
diff --git a/et-trace-utilsConfig.cmake.in b/et-trace-utilsConfig.cmake.in
index 27fa39db..cffdafd5 100644
--- a/et-trace-utilsConfig.cmake.in
+++ b/et-trace-utilsConfig.cmake.in
@@ -15,21 +15,15 @@ find_dependency(nlohmann_json REQUIRED)
 find_dependency(glog REQUIRED)
 find_dependency(fmt REQUIRED)
 find_dependency(Backward REQUIRED)
+find_dependency(tl-expected REQUIRED)
 
-if (ENABLE_UEVENT)
-    find_dependency(uevent REQUIRED)
-endif()
+#find_dependency(uevent OPTIONAL)
 
-if (ENABLE_ET_TRACE)
-    find_dependency(deviceApi REQUIRED)
-    find_dependency(esperantoTrace REQUIRED)
-endif()
+find_dependency(deviceApi)
+find_dependency(esperantoTrace)
 
-if (ENABLE_CEREAL)
-    find_dependency(neuralizer REQUIRED)
-    find_dependency(runtime REQUIRED)
-    find_dependency(cereal REQUIRED)
-endif()
+find_dependency(neuralizer)
+find_dependency(runtime)
+find_dependency(cereal)
 
 include(${CMAKE_CURRENT_LIST_DIR}/et-trace-utilsTargets.cmake)
-check_required_components(et-trace-utils)
diff --git a/include/et-trace-utils/support/frequency.h b/include/et-trace-utils/support/frequency.h
index 0d5c7733..d87bd5bf 100644
--- a/include/et-trace-utils/support/frequency.h
+++ b/include/et-trace-utils/support/frequency.h
@@ -39,10 +39,6 @@ class Frequency {
 
 std::ostream& operator<<(std::ostream& os, Frequency f);
 
-#if FMT_VERSION >= 90000
-template <> struct fmt::formatter<Frequency> : ostream_formatter {};
-#endif
-
 [[nodiscard]] inline Frequency operator""_Hz(unsigned long long v) {
   return Frequency(static_cast<double>(v) * 1.0);
 }
@@ -69,3 +65,7 @@ template <> struct fmt::formatter<Frequency> : ostream_formatter {};
 }
 
 } // end namespace et_tut
+
+#if FMT_VERSION >= 90000
+template <> struct fmt::formatter<et_tut::Frequency> : ostream_formatter {};
+#endif
diff --git a/include/et-trace-utils/thread_layout.h b/include/et-trace-utils/thread_layout.h
index 105a1fec..d588cb58 100644
--- a/include/et-trace-utils/thread_layout.h
+++ b/include/et-trace-utils/thread_layout.h
@@ -93,8 +93,9 @@ class ThreadLayout {
 
 std::ostream& operator<<(std::ostream& os, ThreadLayout::Error err);
 
+} // end namespace et_tut
+
 #if FMT_VERSION >= 90000
-template <> struct fmt::formatter<ThreadLayout::Error> : ostream_formatter {};
+template <> struct fmt::formatter<et_tut::ThreadLayout::Error> : ostream_formatter {};
 #endif
 
-} // end namespace et_tut
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 8bbf9e8a..e15e049c 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -15,31 +15,6 @@ add_subdirectory(perfetto)
 add_subdirectory(support)
 
 target_compile_features(et-trace-utils PUBLIC cxx_std_17)
-target_compile_options(et-trace-utils
-    PUBLIC
-        -Wall
-        -Wextra
-        -Wshadow
-        -Wno-missing-field-initializers
-        $<$<BOOL:${ENABLE_WARNINGS_AS_ERRORS}>:-Werror>
-        -Werror=all
-        -Werror=extra
-        -Werror=shadow
-        -Werror=ignored-qualifiers
-        -Werror=div-by-zero
-        -Werror=unused-but-set-parameter
-        -Werror=unused-but-set-variable
-        -Werror=unused-parameter
-        -Werror=unused-variable
-        -Werror=float-conversion
-        -Werror=double-promotion
-        -Werror=cast-align
-        -Werror=maybe-uninitialized
-        -Werror=parentheses
-        -Werror=unused-local-typedefs
-        -Werror=sign-compare
-        -Werror=narrowing
-)
 target_include_directories(et-trace-utils
     PUBLIC
         $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
@@ -85,10 +60,20 @@ if (ENABLE_CEREAL)
         cereal/perfetto_trace_sink.cc
         cereal/trace_decode.cc
     )
-    
+
+    find_package(LLVM REQUIRED CONFIG)
+    message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
+    message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
+
+    include_directories(${LLVM_INCLUDE_DIRS})
+    separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS})
+    add_definitions(${LLVM_DEFINITIONS_LIST})
+
+    llvm_map_components_to_libnames(llvm_libs support)
+
     target_link_libraries(et-trace-utils PUBLIC
         neuralizer::neuralizer
-        LLVMSupport
+        ${llvm_libs}
         runtime::etrt
         $<IF:$<BOOL:${BUILD_SHARED_LIBS}>,runtime::etrt,runtime::etrt_static>
         cereal::cereal
@@ -107,4 +92,4 @@ if (ET_TRACE_UTILS_INSTALL_LIB)
         DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/et-trace-utils
         NAMESPACE et-trace-utils::
     )
-endif()
\ No newline at end of file
+endif()
diff --git a/src/cereal/cereal_evt_getters.cc b/src/cereal/cereal_evt_getters.cc
index 8035a2cb..facee0e4 100644
--- a/src/cereal/cereal_evt_getters.cc
+++ b/src/cereal/cereal_evt_getters.cc
@@ -69,19 +69,19 @@ namespace detail {
 
 template <typename T>
 void add_argument_with_key(nl::json& args, std::string_view key, T argument) {
-  args[key] = argument;
+  args[std::string(key)] = argument;
 }
 
 template <typename T>
 void add_vect_arguments_with_key(nl::json& args, std::string_view key, const std::vector<T>& vect_argument) {
-  args[key] = nl::json::array();
+  args[std::string(key)] = nl::json::array();
   if constexpr (std::is_same_v<T, neura::AllocInfo>) {
     for (size_t i = 0u; i < vect_argument.size(); ++i) {
       nl::json args_allocs;
       add_argument_with_key(args_allocs, "id", vect_argument[i].id);
       add_argument_with_key(args_allocs, "align", vect_argument[i].align);
       add_argument_with_key(args_allocs, "size", vect_argument[i].size);
-      args[key].push_back(args_allocs);
+      args[std::string(key)].push_back(args_allocs);
     }
   } else if constexpr (std::is_same_v<T, neura::CopyInfoToDev>) {
     for (size_t i = 0u; i < vect_argument.size(); ++i) {
@@ -89,7 +89,7 @@ void add_vect_arguments_with_key(nl::json& args, std::string_view key, const std
       add_argument_with_key(args_copies, "id", vect_argument[i].id);
       add_argument_with_key(args_copies, "offset", vect_argument[i].offset);
       add_argument_with_key(args_copies, "size", vect_argument[i].size);
-      args[key].push_back(args_copies);
+      args[std::string(key)].push_back(args_copies);
     }
   } else if constexpr (std::is_same_v<T, neura::CopyInfoToHost>) {
     for (size_t i = 0u; i < vect_argument.size(); ++i) {
@@ -97,26 +97,26 @@ void add_vect_arguments_with_key(nl::json& args, std::string_view key, const std
       add_argument_with_key(args_copies, "id", vect_argument[i].id);
       add_argument_with_key(args_copies, "offset", vect_argument[i].offset);
       add_argument_with_key(args_copies, "size", vect_argument[i].size);
-      args[key].push_back(args_copies);
+      args[std::string(key)].push_back(args_copies);
     }
   } else if constexpr (std::is_same_v<T, neura::AllocId>) {
     for (size_t i = 0u; i < vect_argument.size(); ++i) {
       nl::json alloc_ids;
       add_argument_with_key(alloc_ids, "id", vect_argument[i]);
-      args[key].push_back(alloc_ids);
+      args[std::string(key)].push_back(alloc_ids);
     }
   } else if constexpr (std::is_same_v<T, neura::LaunchInfo>) {
     for (size_t i = 0u; i < vect_argument.size(); ++i) {
       nl::json kernel_launches;
       add_argument_with_key(kernel_launches, "id", vect_argument[i].id);
       add_vect_arguments_with_key(kernel_launches, "alloc_ids", vect_argument[i].args);
-      args[key].push_back(kernel_launches);
+      args[std::string(key)].push_back(kernel_launches);
     }
   } else if constexpr (std::is_same_v<T, neura::EInstructionMetadata>) {
     for (size_t i = 0u; i < vect_argument.size(); ++i) {
       nl::json instructions;
       add_argument_with_key(instructions, "number", vect_argument[i].number);
-      args[key].push_back(instructions);
+      args[std::string(key)].push_back(instructions);
     }
   }
 }
@@ -144,7 +144,7 @@ void add_opt_argument_with_key(std::optional<nl::json>& args, std::string_view k
     add_argument_with_key(args_co, "optLevel", compileOptions.optLevel);
     add_argument_with_key(args_co, "logTensorSize", compileOptions.logTensorSize);
     add_argument_with_key(args_co, "dev", compileOptions.dev);
-    (*args)[key] = args_co;
+    (*args)[std::string(key)] = args_co;
   } else if constexpr (std::is_same_v<Td, std::vector<neura::AllocInfo>> ||
                        std::is_same_v<Td, std::vector<neura::CopyInfoToDev>> ||
                        std::is_same_v<Td, std::vector<neura::CopyInfoToHost>> ||
@@ -156,7 +156,7 @@ void add_opt_argument_with_key(std::optional<nl::json>& args, std::string_view k
     const auto& argument = opt_argument.value();
     auto& output_json = args.value();
 
-    output_json[key] = nl::json{
+    output_json[std::string(key)] = nl::json{
       {"device_arch", argument.deviceArch_},
       {"frequency_Mhz", argument.frequency_},
       {"available_shires", argument.availableShires_},
diff --git a/src/et_trace/txt_trace_sink.cc b/src/et_trace/txt_trace_sink.cc
index 61383655..2831b27d 100644
--- a/src/et_trace/txt_trace_sink.cc
+++ b/src/et_trace/txt_trace_sink.cc
@@ -5,6 +5,10 @@
 #include <et-trace/layout.h>  // for trace_entry_header_t, trace_custom_event_t
 
 #include <fmt/format.h>       // for join
+#include <fmt/ranges.h>       // for join
+#if FMT_VERSION >= 90000
+#include <fmt/ostream.h>
+#endif
 
 #include <stdio.h>            // for stderr
 #include <string.h>           // for strnlen
@@ -35,25 +39,15 @@ struct DataPointFmt {
   const std::string avg_;
   const std::string min_;
   const std::string max_;
-};
-
-} // end namespace et_tut::et_trace
 
-namespace fmt {
-template <>
-struct formatter<et_tut::et_trace::DataPointFmt> {
-  template <typename ParseContext>
-  constexpr auto parse(ParseContext& ctx) {
-    return std::begin(ctx);
-  }
-
-  template <typename FormatContext>
-  auto format(const et_tut::et_trace::DataPointFmt& dp, FormatContext& ctx) {
-    return format_to(ctx.out(), "{}({}-{})", dp.avg_, dp.min_, dp.max_);
+  friend std::ostream& operator<<(std::ostream& os, const DataPointFmt& dp) {  
+    return os << dp.avg_ << '(' << dp.min_ << '-' << dp.max_ << ')';
   }
 };
-}  // namespace fmt
 
+} // end namespace et_tut::et_trace
+
+template <> struct fmt::formatter<et_tut::et_trace::DataPointFmt> : ostream_formatter {};
 
 namespace et_tut::et_trace {
 
diff --git a/src/symbol_table.h b/src/symbol_table.h
index 798534fc..5dd3ebf5 100644
--- a/src/symbol_table.h
+++ b/src/symbol_table.h
@@ -120,8 +120,9 @@ class SymbolTable {
 
 std::ostream& operator<<(std::ostream& os, SymbolTable::Error err);
 
+} // end namespace et_tut
+
 #if FMT_VERSION >= 90000
-template <> struct fmt::formatter<SymbolTable::Error> : ostream_formatter {};
+template <> struct fmt::formatter<et_tut::SymbolTable::Error> : ostream_formatter {};
 #endif
 
-} // end namespace et_tut
diff --git a/tests/integration/cereal/cereal_evt_getters_test.cc b/tests/integration/cereal/cereal_evt_getters_test.cc
index 658b217c..d1042507 100644
--- a/tests/integration/cereal/cereal_evt_getters_test.cc
+++ b/tests/integration/cereal/cereal_evt_getters_test.cc
@@ -232,7 +232,7 @@ TEST(get_args, should_process_runtime_events_with_metadata) {
     EXPECT_TRUE(args.has_value());
     auto args_js = args.value();
     EXPECT_TRUE(args_js.contains(expected_key));
-    EXPECT_EQ(args_js[expected_key], expected_value);
+    EXPECT_EQ(args_js[std::string(expected_key)], expected_value);
   };
 
   check({}, kEventId, 20);
diff --git a/tools/evt2json/main.cc b/tools/evt2json/main.cc
index fccc37c9..41999dcb 100644
--- a/tools/evt2json/main.cc
+++ b/tools/evt2json/main.cc
@@ -80,6 +80,7 @@ std::unique_ptr<DutTrace> get_dut_trace_or_die(const Options& opts) {
       return std::make_unique<UeventTrace>(opts.trace);
 #else   // ENABLE_UEVENT
       die("Error: Uevent not supported!\n");
+      return nullptr;
 #endif  // ENABLE_UEVENT
     case TraceType::Cosim:
       return std::make_unique<CosimTrace>(opts.trace);
