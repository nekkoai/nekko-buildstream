diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index 205dccdad6..1987956cfc 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -143,6 +143,10 @@ option(onnxruntime_ENABLE_PIX_FOR_WEBGPU_EP "Adding frame present for PIX to cap
 # The following 2 options are only for Windows
 option(onnxruntime_ENABLE_DAWN_BACKEND_VULKAN "Enable Vulkan backend for Dawn (on Windows)" OFF)
 option(onnxruntime_ENABLE_DAWN_BACKEND_D3D12 "Enable D3D12 backend for Dawn (on Windows)" ON)
+option(onnxruntime_USE_ETGLOW "Build with ESPERANTO GLOW support." OFF)
+# Enable ONNX Runtime ETGLOW EP's internal unit tests that directly access the EP's internal functions instead of through
+# OpKernels. Same GTest observations as in onnxruntime_ENABLE_CUDA_EP_INTERNAL_TESTS
+cmake_dependent_option(onnxruntime_ENABLE_ETGLOW_EP_INTERNAL_TESTS "Build with ETGLOW unit tests" OFF "onnxruntime_USE_ETGLOW;onnxruntime_BUILD_UNIT_TESTS;LINUX" OFF)
 
 # Options related to reducing the binary size produced by the build
 # XNNPACK EP requires the internal NHWC contrib ops to be available, so this option must be OFF when onnxruntime_USE_XNNPACK is ON
@@ -1140,7 +1144,7 @@ function(onnxruntime_set_compile_flags target_name)
       target_compile_definitions(${target_name} PRIVATE ENABLE_ATEN)
     endif()
 
-    set_target_properties(${target_name} PROPERTIES COMPILE_WARNING_AS_ERROR ON)
+    #set_target_properties(${target_name} PROPERTIES COMPILE_WARNING_AS_ERROR ON)
     if (onnxruntime_USE_CUDA)
       # Suppress a "conversion_function_not_usable" warning in gsl/span
       target_compile_options(${target_name} PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcudafe \"--diag_suppress=conversion_function_not_usable\">")
diff --git a/cmake/external/abseil-cpp.cmake b/cmake/external/abseil-cpp.cmake
index cd93a8da00..a47cb6ab59 100644
--- a/cmake/external/abseil-cpp.cmake
+++ b/cmake/external/abseil-cpp.cmake
@@ -28,7 +28,7 @@ onnxruntime_fetchcontent_declare(
     URL_HASH SHA1=${DEP_SHA1_abseil_cpp}
     EXCLUDE_FROM_ALL
     PATCH_COMMAND ${ABSL_PATCH_COMMAND}
-    FIND_PACKAGE_ARGS 20240722 NAMES absl
+    FIND_PACKAGE_ARGS NAMES absl
 )
 
 onnxruntime_fetchcontent_makeavailable(abseil_cpp)
diff --git a/cmake/external/eigen.cmake b/cmake/external/eigen.cmake
index f885606973..7f2bd1eba3 100644
--- a/cmake/external/eigen.cmake
+++ b/cmake/external/eigen.cmake
@@ -8,5 +8,6 @@ onnxruntime_fetchcontent_declare(
     URL ${DEP_URL_eigen}
     URL_HASH SHA1=${DEP_SHA1_eigen}
     EXCLUDE_FROM_ALL
+    FIND_PACKAGE_ARGS NAMES Eigen3
 )
 onnxruntime_fetchcontent_makeavailable(eigen)
diff --git a/cmake/onnxruntime_common.cmake b/cmake/onnxruntime_common.cmake
index e599e4f04a..9af23672e5 100644
--- a/cmake/onnxruntime_common.cmake
+++ b/cmake/onnxruntime_common.cmake
@@ -135,7 +135,7 @@ target_include_directories(onnxruntime_common
         ${OPTIONAL_LITE_INCLUDE_DIR})
 
 
-target_link_libraries(onnxruntime_common PUBLIC safeint_interface ${GSL_TARGET} ${ABSEIL_LIBS} date::date)
+target_link_libraries(onnxruntime_common PUBLIC safeint_interface ${GSL_TARGET} ${ABSEIL_LIBS} date::date Eigen3::Eigen)
 
 add_dependencies(onnxruntime_common ${onnxruntime_EXTERNAL_DEPENDENCIES})
 
diff --git a/cmake/onnxruntime_providers.cmake b/cmake/onnxruntime_providers.cmake
index 67fa48b282..3cb473f832 100644
--- a/cmake/onnxruntime_providers.cmake
+++ b/cmake/onnxruntime_providers.cmake
@@ -203,3 +203,7 @@ endif()
 if (onnxruntime_USE_AZURE)
   include(onnxruntime_providers_azure.cmake)
 endif()
+
+if (onnxruntime_USE_ETGLOW)
+  include(onnxruntime_providers_etglow.cmake)
+endif()
diff --git a/cmake/onnxruntime_python.cmake b/cmake/onnxruntime_python.cmake
index aee6d2ff76..a03fec6d30 100644
--- a/cmake/onnxruntime_python.cmake
+++ b/cmake/onnxruntime_python.cmake
@@ -190,6 +190,18 @@ if(onnxruntime_BUILD_QNN_EP_STATIC_LIB)
   list(APPEND onnxruntime_pybind11_state_static_providers PRIVATE onnxruntime_providers_qnn)
 endif()
 
+find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
+
+# Get NumPy include directory
+execute_process(COMMAND ${Python3_EXECUTABLE} -c "import numpy; print(numpy.get_include())"
+  OUTPUT_VARIABLE NUMPY_INCLUDE_DIR
+  OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+target_include_directories(onnxruntime_pybind11_state PRIVATE
+   ${Python3_INCLUDE_DIRS}
+   ${NUMPY_INCLUDE_DIR}
+)
+
 target_link_libraries(onnxruntime_pybind11_state PRIVATE
     onnxruntime_session
     ${onnxruntime_libs}
@@ -204,6 +216,7 @@ target_link_libraries(onnxruntime_pybind11_state PRIVATE
     ${ONNXRUNTIME_MLAS_LIBS}
     onnxruntime_common
     onnxruntime_flatbuffers
+    ${Python3_LIBRARIES}
     ${pybind11_lib}
     Python::NumPy
 )
@@ -1051,4 +1064,23 @@ if (onnxruntime_USE_VSINPU)
   )
 endif()
 
+
+if (onnxruntime_USE_ETGLOW)
+  file(GLOB onnxruntime_python_providers_etglow_srcs CONFIGURE_DEPENDS
+    "${ONNXRUNTIME_ROOT}/python/providers/etglow/*.py"
+  )
+  add_custom_command(
+    TARGET onnxruntime_pybind11_state POST_BUILD
+    COMMAND ${CMAKE_COMMAND} -E make_directory $<TARGET_FILE_DIR:${build_output_target}>/onnxruntime/providers
+    COMMAND ${CMAKE_COMMAND} -E make_directory $<TARGET_FILE_DIR:${build_output_target}>/onnxruntime/providers/etglow
+    COMMAND ${CMAKE_COMMAND} -E copy
+        ${onnxruntime_python_providers_etglow_srcs}
+        $<TARGET_FILE_DIR:${build_output_target}>/onnxruntime/providers/etglow
+    COMMAND ${CMAKE_COMMAND} -E copy
+        $<TARGET_FILE:onnxruntime_providers_etglow>
+        $<TARGET_FILE:onnxruntime_providers_shared>
+        $<TARGET_FILE_DIR:${build_output_target}>/onnxruntime/capi/
+  )
+endif()
+
 endif()
diff --git a/cmake/onnxruntime_unittests.cmake b/cmake/onnxruntime_unittests.cmake
index 0916aeb3dd..5aad822e14 100644
--- a/cmake/onnxruntime_unittests.cmake
+++ b/cmake/onnxruntime_unittests.cmake
@@ -556,6 +556,11 @@ set(onnxruntime_test_server_libs
   onnxruntime_test_utils_for_server
 )
 
+if (onnxruntime_USE_ETGLOW)
+  list(APPEND onnxruntime_test_framework_src_patterns ${TEST_SRC_DIR}/providers/etglow/*)
+  list(APPEND onnxruntime_test_framework_src_patterns ${TEST_SRC_DIR}/providers/etglow/test_ops/*)
+endif()
+
 if(WIN32)
     list(APPEND onnxruntime_test_framework_libs Advapi32)
 endif()
@@ -619,8 +624,12 @@ if(onnxruntime_USE_ARMNN)
   list(APPEND onnxruntime_test_providers_dependencies onnxruntime_providers_armnn)
 endif()
 
+if(onnxruntime_USE_ETGLOW)
+  list(APPEND onnxruntime_test_providers_dependencies onnxruntime_providers_etglow)
+endif()
+
 set(ONNXRUNTIME_TEST_STATIC_PROVIDER_LIBS
-    # CUDA, ROCM, TENSORRT, MIGRAPHX, DNNL, and OpenVINO are dynamically loaded at runtime.
+    # CUDA, ROCM, TENSORRT, MIGRAPHX, DNNL, ETGLOW, and OpenVINO are dynamically loaded at runtime.
     # QNN EP can be built as either a dynamic and static libs.
     ${PROVIDERS_NNAPI}
     ${PROVIDERS_VSINPU}
@@ -837,6 +846,19 @@ if (onnxruntime_ENABLE_CUDA_EP_INTERNAL_TESTS)
   list(APPEND onnxruntime_test_providers_dependencies onnxruntime_providers_cuda_ut)
 endif()
 
+if (onnxruntime_ENABLE_ETGLOW_EP_INTERNAL_TESTS)
+  file(GLOB onnxruntime_test_providers_etglow_ut_src CONFIGURE_DEPENDS
+    "${TEST_SRC_DIR}/providers/etglow/test_cases/*"
+  )
+  # onnxruntime_providers_etglow_ut is only for unittests.
+  onnxruntime_add_shared_library_module(onnxruntime_providers_etglow_ut ${onnxruntime_test_providers_etglow_ut_src} $<TARGET_OBJECTS:onnxruntime_providers_etglow_obj>)
+  config_etglow_provider_shared_module(onnxruntime_providers_etglow_ut)
+  onnxruntime_add_include_to_target(onnxruntime_providers_etglow_ut GTest::gtest GTest::gmock)
+  target_include_directories(onnxruntime_providers_etglow_ut PRIVATE ${TEST_SRC_DIR}/util/include)
+  target_link_libraries(onnxruntime_providers_etglow_ut PRIVATE GTest::gtest GTest::gmock ${ONNXRUNTIME_MLAS_LIBS} onnxruntime_common)
+  list(APPEND onnxruntime_test_providers_dependencies onnxruntime_providers_etglow_ut)
+endif()
+
 set(all_dependencies ${onnxruntime_test_providers_dependencies} )
 
 if (onnxruntime_ENABLE_TRAINING)
@@ -903,6 +925,9 @@ endif ()
 if(NOT onnxruntime_ENABLE_CUDA_EP_INTERNAL_TESTS)
   list(REMOVE_ITEM all_tests ${TEST_SRC_DIR}/providers/cuda/cuda_provider_test.cc)
 endif()
+if(NOT onnxruntime_ENABLE_ETGLOW_EP_INTERNAL_TESTS)
+  list(REMOVE_ITEM all_tests ${TEST_SRC_DIR}/providers/etglow/etglow_provider_test_entrypoint.cc)
+endif()
 AddTest(
   TARGET onnxruntime_test_all
   SOURCES ${all_tests} ${onnxruntime_unittest_main_src}
diff --git a/cmake/onnxruntime_util.cmake b/cmake/onnxruntime_util.cmake
index 17e64ca2c1..64dbafcf34 100644
--- a/cmake/onnxruntime_util.cmake
+++ b/cmake/onnxruntime_util.cmake
@@ -15,7 +15,7 @@ if(UNIX)
 endif()
 set_target_properties(onnxruntime_util PROPERTIES LINKER_LANGUAGE CXX)
 set_target_properties(onnxruntime_util PROPERTIES FOLDER "ONNXRuntime")
-add_dependencies(onnxruntime_util ${onnxruntime_EXTERNAL_DEPENDENCIES})
+target_link_libraries(onnxruntime_util ${onnxruntime_EXTERNAL_DEPENDENCIES})
 if (WIN32)
     target_compile_definitions(onnxruntime_util PRIVATE _SCL_SECURE_NO_WARNINGS)
 endif()
diff --git a/cmake/onnxruntime_providers_etglow.cmake b/cmake/onnxruntime_providers_etglow.cmake
new file mode 100644
index 0000000000..4fb31df546
--- /dev/null
+++ b/cmake/onnxruntime_providers_etglow.cmake
@@ -0,0 +1,69 @@
+add_definitions(-DUSE_ETGLOW=1)
+
+find_package(et-trace-utils REQUIRED)
+find_package(runtime REQUIRED)
+
+find_package(LLVM REQUIRED CONFIG)
+message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
+
+separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS})
+llvm_map_components_to_libnames(llvm_libs support)
+
+file(GLOB_RECURSE onnxruntime_providers_etglow_src CONFIGURE_DEPENDS
+        "${ONNXRUNTIME_ROOT}/core/providers/etglow/*.h"
+        "${ONNXRUNTIME_ROOT}/core/providers/etglow/*.cc"
+        "${ONNXRUNTIME_ROOT}/core/providers/shared_library/*.h"
+        "${ONNXRUNTIME_ROOT}/core/providers/shared_library/*.cc"
+)
+source_group(TREE ${ONNXRUNTIME_ROOT}/core FILES ${onnxruntime_providers_etglow_src})
+
+if (onnxruntime_ENABLE_ETGLOW_EP_INTERNAL_TESTS)
+    # etglow_provider_interface.cc is removed from the object library target onnxruntime_providers_etglow_obj and
+    # added to the plugin library onnxruntime_providers_etglow separately
+    set(etglow_provider_interface_src ${ONNXRUNTIME_ROOT}/core/providers/etglow/etglow_provider_interface.cc)
+    list(REMOVE_ITEM onnxruntime_providers_etglow_src ${etglow_provider_interface_src})
+    onnxruntime_add_object_library(onnxruntime_providers_etglow_obj ${onnxruntime_providers_etglow_src})
+    onnxruntime_add_shared_library_module(onnxruntime_providers_etglow ${etglow_provider_interface_src} $<TARGET_OBJECTS:onnxruntime_providers_etglow_obj>)
+else ()
+    onnxruntime_add_shared_library_module(onnxruntime_providers_etglow ${onnxruntime_providers_etglow_src})
+endif ()
+
+
+function(config_etglow_provider_shared_module target)
+    onnxruntime_add_include_to_target(${target} onnxruntime_common onnxruntime_framework onnx onnx_proto ${PROTOBUF_LIB} flatbuffers::flatbuffers)
+    target_include_directories(${target} PRIVATE ${LLVM_INCLUDE_DIRS})
+    target_compile_definitions(${target} PRIVATE ${LLVM_DEFINITIONS_LIST})
+
+    #target_link_libraries(${target} onnxruntime_providers_shared ${onnxruntime_EXTERNAL_DEPENDENCIES})
+    target_link_libraries(${target} PRIVATE 
+	   glow::Api runtime::etrt et-trace-utils::et-trace-utils Boost::mp11 ${llvm_libs})
+    set_target_properties(${target} PROPERTIES FOLDER "ONNXRuntime")
+    set_target_properties(${target} PROPERTIES LINKER_LANGUAGE CXX)
+    if(APPLE)
+        set_property(TARGET ${target} APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker -exported_symbols_list ${ONNXRUNTIME_ROOT}/core/providers/etglow/exported_symbols.lst")
+        set_target_properties(${target} PROPERTIES
+                INSTALL_RPATH "@loader_path"
+                BUILD_WITH_INSTALL_RPATH TRUE
+                INSTALL_RPATH_USE_LINK_PATH FALSE)
+    elseif(UNIX)
+        set_property(TARGET ${target} APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker --version-script=${ONNXRUNTIME_ROOT}/core/providers/etglow/version_script.lds -Xlinker --gc-sections -Xlinker -rpath=\$ORIGIN")
+    elseif(WIN32)
+        set_property(TARGET ${target} APPEND_STRING PROPERTY LINK_FLAGS "-DEF:${ONNXRUNTIME_ROOT}/core/providers/etglow/symbols.def")
+    else()
+        message(FATAL_ERROR "${target} unknown platform, need to specify shared library exports for it")
+    endif()
+endfunction()
+
+if (onnxruntime_ENABLE_ETGLOW_EP_INTERNAL_TESTS)
+    config_etglow_provider_shared_module(onnxruntime_providers_etglow_obj)
+endif()
+config_etglow_provider_shared_module(onnxruntime_providers_etglow)
+
+
+
+install(DIRECTORY ${ONNXRUNTIME_INCLUDE_DIR}/core/providers/etglow
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/onnxruntime/core/providers)
+install(TARGETS onnxruntime_providers_etglow
+        ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR})
