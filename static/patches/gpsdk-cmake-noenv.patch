diff --git a/device/gp-sdk/CMakeLists.txt b/device/gp-sdk/CMakeLists.txt
index f905a13..916e8ec 100644
--- a/device/gp-sdk/CMakeLists.txt
+++ b/device/gp-sdk/CMakeLists.txt
@@ -2,12 +2,12 @@ cmake_minimum_required(VERSION 3.5)
 
 project(gp-sdk VERSION 1.6.0 LANGUAGES C CXX ASM)
 
-if(NOT DEFINED ENV{ET_SDK_HOME})
+if(NOT ET_SDK_HOME)
   message(
     FATAL_ERROR
       "Missing $ET_SDK_HOME. Please run from inside the et_docker environment")
 endif()
-if(NOT DEFINED ENV{DEV_COMPILER})
+if(NOT DEV_COMPILER)
   message(
     FATAL_ERROR
       "Missing $DEV_COMPILER. Please choose device compiler (clang11 or gcc8.2)")
@@ -23,8 +23,6 @@ ExternalProject_Add(
   SOURCE_DIR "${CMAKE_SOURCE_DIR}/host"
   BUILD_ALWAYS 1
   CMAKE_ARGS
-    -DCMAKE_TOOLCHAIN_FILE=$ENV{ET_SDK_HOME}/.builds/host/conan_toolchain.cmake
-    -DCMAKE_BUILD_TYPE=Release
     -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/local)
 
 ExternalProject_Add(
@@ -32,7 +30,4 @@ ExternalProject_Add(
   SOURCE_DIR "${CMAKE_SOURCE_DIR}/device"
   BUILD_ALWAYS 1
   CMAKE_ARGS
-    -DCMAKE_TOOLCHAIN_FILE=$ENV{ET_SDK_HOME}/.builds/device/$ENV{DEV_COMPILER}/conan_toolchain.cmake
-    -DCMAKE_BUILD_TYPE=Release
-    -DADDRESS:STRING=${ADDRESS}
     -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/local)
diff --git a/device/gp-sdk/device/CMakeLists.txt b/device/gp-sdk/device/CMakeLists.txt
index c2959e1..ff55d66 100644
--- a/device/gp-sdk/device/CMakeLists.txt
+++ b/device/gp-sdk/device/CMakeLists.txt
@@ -22,6 +22,7 @@ set(GP_SDK_LINKER_SCRIPT "${CMAKE_CURRENT_SOURCE_DIR}/sdk/lib/linker.ld" CACHE P
 if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
   message(STATUS "Configuring Device build for clang Compiler.. ")
   string(APPEND CMAKE_ASM_FLAGS " ${CMAKE_C_FLAGS}")
+  set(CMAKE_CXX_STANDARD 17)
 else()
   message(STATUS "Configuring Device build for gcc Compiler.. ")
 endif()
@@ -31,7 +32,6 @@ if (BUILD_TESTS AND NOT ADDRESS)
   message(FATAL_ERROR "ADDRESS parameter is missing. Please provide a value (e.g: -DADDRESS:STRING=0x8006335000")
 endif()
 
-set(CMAKE_CXX_STANDARD 17)
 
 find_package(et-common-libs REQUIRED COMPONENTS cm-umode)
 find_package(dnnLibrary)
